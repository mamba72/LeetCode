using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LeetCodeHelperFunctions;

namespace MediumProblems
{
	internal class MaximumXORTwoNumsInArrayProblem
	{
		//solving this problem: https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/
		public static void Tester()
		{
			int[] nums = { 2005, 9569, 2601, 264, 1855, 5601, 4357, 3524, 2088, 8782, 7135, 6729, 1209, 1965, 4124, 2447, 1415, 1410, 8135, 7960, 7663, 8793, 7180, 9367, 4082, 1720, 4731, 1460, 3084, 4689, 9718, 1086, 6380, 3016, 8254, 5884, 9758, 4635, 2649, 7081, 4058, 9582, 7037, 8139, 9229, 7439, 6691, 8981, 890, 4746, 8544, 71, 1421, 9474, 216, 3330, 1793, 5514, 9891, 2894, 2239, 5035, 4912, 6348, 4196, 8115, 4795, 6885, 3115, 2994, 9317, 6940, 1942, 5051, 6129, 6814, 7226, 6434, 8771, 3481, 9805, 6299, 3856, 6714, 5744, 7108, 1409, 1859, 1077, 9570, 6249, 4647, 938, 7206, 2726, 5107, 9463, 1609, 6927, 2785 };
			//nums = new int[] {};

			nums = InputReadingFuncts.ReadMassiveInput_Array("\\MassiveInputs\\MaxXOR.txt");

			int max = FindMaximumXOR(nums);

			Console.WriteLine(max);
		}

		private static int FindMaximumXOR(int[] nums)
		{
			//int[] numSet = new HashSet<int>(nums).ToArray();
			//nums = nums.Distinct().ToArray();
			nums = new HashSet<int>(nums).ToArray();
			int max = int.MinValue;

			//foreach(int num in numSet)
			//{
			//	foreach(int num2 in numSet)
			//	{
			//		if (num == num2)
			//			continue;
			//		else
			//		{
			//			max = Math.Max(max, num ^ num2);
			//		}
			//	}
			//}

			for (int i = 0; i < nums.Length; i++)
			{
				for(int j = i; j < nums.Length; j++)
				{
					int xor = nums[i] ^ nums[j];
					if(xor > max)
						max = xor;
				}
			}

			return max;
		}
	}
}
