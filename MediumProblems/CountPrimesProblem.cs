using LeetCodeHelperFunctions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MediumProblems
{
	internal class CountPrimesProblem
	{
		//solving this problem: https://leetcode.com/problems/count-primes/
		public static void Tester()
		{
			int[] inputs = { 10, 0, 1, int.MaxValue };
			inputs = new int[] { 321, 715, 993, 350, 381, 655, 459, 142, 387, 516, 723, 99, 470, 650, 344, 561, 18, 318, 292, 350, 796, 329, 856, 539, 585, 754, 138, 941, 290, 99, 165, 75, 283, 662, 561, 92, 330, 418, 286, 650, 413, 142, 160, 50, 24, 967, 298, 397, 111, 89, 714, 677, 922, 55, 985, 270, 790, 237, 647, 169, 150, 384, 55, 593, 353, 32, 726, 222, 46, 969, 987, 155, 656, 346, 726, 107, 625, 950, 691, 370, 977, 384, 309, 911, 991, 7, 361, 200, 463, 4, 210, 570, 147, 664, 672, 740, 183, 183, 737, 715, 991, 208, 2, 813, 426, 639, 925, 229, 971, 95, 701, 823, 992, 825, 841, 102, 9, 464, 67, 73, 821, 716, 396, 722, 544, 386, 121, 51, 832, 997, 367, 491, 497, 617, 97, 924, 587, 486, 546, 25, 452, 238, 843, 632, 662, 695, 628, 87, 674, 511, 547, 408, 535, 871, 492, 798, 805, 358, 595, 786, 115, 168, 631, 891, 512, 291, 404, 538, 601, 124, 522, 508, 684, 651, 326, 979, 171, 819, 373, 245, 664, 325, 740, 985, 71, 868, 767, 591, 125, 39, 726, 595, 791, 757, 502, 744, 381, 867, 899, 345, 1540989, 1537905, 2449881, 21496, 516643, 200588, 1723030, 2627198, 4386766, 4632663, 4071541, 316689, 1193610, 63248, 4122186, 3732015, 4669807, 1289336, 4787488, 3096058, 2035812, 4075214, 2853836, 3565954, 1975166, 1193646, 4105811, 2740525, 637953, 3068663, 3125500, 2182664, 2487215, 47949, 4492550, 3227650, 4686439, 601489, 3072743, 4972758, 1734296, 3297949, 910983, 1549721, 1086776, 3312376, 4128131, 3700828, 3450131, 3987248, 2169333, 2664072, 4725902, 3122505, 1919602, 581742, 3176539, 3960547, 1755165, 3096172, 944733, 2753688, 316918, 2203650, 2012021, 3650333, 3689427, 3918634, 386126, 4215650, 4902560, 2941028, 750753, 3394920, 295252, 2771873, 1600801, 929062, 739620, 4054227, 2018449, 4808848, 1789530, 3168955, 4502525, 684311, 4430458, 374582, 4412443, 337917, 3447225, 1817643, 210773, 2916337, 4931889, 96354, 318922, 963357, 1692988, 4530723, 2224824, 2776344, 647938, 2170531, 3698389, 200784, 1232409, 3614801, 1314312, 2433657, 4483468, 1135554, 1898502, 3078269, 1530330, 1960283, 3060855, 3068778, 1130603, 2096530, 4883696, 975337, 1910249, 1187332, 3169106, 3129946, 1109478, 4716005, 3119857, 3673460, 3106868, 1988598, 1743975, 2442870, 1712937, 1781130, 1971687, 3925798, 2899558, 1644557, 46117, 2520361, 4742201, 399818, 2879431, 2870884, 4456979, 1993319, 3160575, 3149966, 1483752, 3499494, 2103208, 2743364, 368154, 3149312, 4092755, 4852280, 3616897, 420486, 3744854, 4687456, 910742, 3951685, 2779072, 3277824, 3232820, 482913, 50372, 1520099, 4553706, 564196, 296489, 4131867, 72367, 1550734, 2361501, 643130, 1605226, 56625, 4091048, 84053, 1842638, 795264, 2550530, 2092315, 2532159, 398158, 199638, 2214881, 3600559, 2167722, 3430662, 2912387, 4797959, 1895909, 702081, 833089, 2378049, 1485101, 5000000};


			TimingFuncts.StartStopWatch();
			foreach (int input in inputs)
			{
				CountPrimes(input);
			}
			Console.WriteLine(TimingFuncts.StopStopWatch());

		}

		private static HashSet<int> PrevPrimes = new HashSet<int>();
		private static int MaxPrevPrime = 1;

		public static int CountPrimes(int n)
		{
			if(n <= 1)
				return 0;
			
			int count = PrevPrimes.Select(x => x).Where(x => x < n).Count();
			Console.WriteLine("Input: " + n + ", Prev Prime Count: " + count);

			int ogMaxPrime = MaxPrevPrime;

			for(int i = n - 1; i > ogMaxPrime; i--)
			{
				if(IsPrime(i))
				{
					count++;
					MaxPrevPrime = Math.Max(MaxPrevPrime, i);
					PrevPrimes.Add(i);
				}
			}

			return count;
		}

		public static bool IsPrime(int number)
		{
			//if (number < 2) return false;
			if (number % 2 == 0) return (number == 2);
			int root = (int)Math.Sqrt((double)number);
			for (int i = 3; i <= root; i += 2)
			{
				if (number % i == 0) return false;
			}
			return true;
		}
	}
}
